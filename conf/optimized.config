aws {
   region = 'us-east-1'
   batch {
      delayBetweenAttempts = 1000
      maxTransferAttempts = 100
      maxParallelTransfers = 8
   }
   client {
        maxConnections = 32
        uploadStorageClass = 'STANDARD_IA'
        maxErrorRetry = 100
        uploadMaxThreads = 32
        uploadChunkSize = '250MB'
        uploadRetrySleep = '60 sec'
    }
}

process {

    cpus   = { check_max( 2    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    //errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }
    maxRetries    = 3
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    withLabel:process_single {
        // cpus   = { check_max( 1                  , 'cpus'    ) }
        // time   = { check_max( 4.h  * task.attempt, 'time'    ) }
        cpus = { task.attempt > 2 ? check_max(4, 'cpus') : check_max(1 * task.attempt, 'cpus') }
        memory = { check_max( 3.5.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h  * task.attempt, 'time'    ) }
    }

    withLabel:process_low {
        // cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        cpus = { task.attempt > 2 ? check_max(4, 'cpus') : check_max(2, 'cpus') }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }

    withLabel:process_medium {
        // cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        cpus = { task.attempt > 2 ? check_max(8, 'cpus') : check_max(4, 'cpus') }
        memory = { check_max( 34.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h   * task.attempt, 'time'    ) }
    }

    withLabel:process_high {
        // cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        cpus = { task.attempt > 2 ? check_max(30, 'cpus') : check_max(16, 'cpus') }
        memory = { check_max( 60.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 48.h  * task.attempt, 'time'    ) }
    }

    withLabel:process_long {
        time   = { check_max( 72.h  * task.attempt, 'time'    ) }
    }

    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }

    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }

    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 3
    }

}

process {
    
  withName: 'NFCORE_RNASEQ:RNASEQ:PREPARE_GENOME:CUSTOM_GETCHROMSIZES' {
    cpus = { 2 * task.attempt }
    memory = { 2.GB * task.attempt }
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:PREPARE_GENOME:GTF_FILTER' {
    cpus = { 2 * task.attempt }
    memory = { 2.GB * task.attempt }
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:PREPARE_GENOME:MAKE_TRANSCRIPTS_FASTA' {
    cpus = { 2 * task.attempt }
    memory = { 2.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:PREPARE_GENOME:SALMON_INDEX' {
      cpus = { 6 * task.attempt }
      memory = { 34.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:PREPARE_GENOME:SORTMERNA_INDEX' {
      cpus = { 8 * task.attempt }
      memory = { 16.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:FASTQ_QC_TRIM_FILTER_SETSTRANDEDNESS:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {
      cpus = { 8 * task.attempt }
      memory = { 16.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {
    cpus = { 4 * task.attempt }
    memory = { 8.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:FASTQ_QC_TRIM_FILTER_SETSTRANDEDNESS:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:UMITOOLS_EXTRACT' {
      cpus = { 2 * task.attempt }
      memory = { 3.5.GB * task.attempt }
  }
  
  withName: 'NFCORE_RNASEQ:RNASEQ:FASTQ_QC_TRIM_FILTER_SETSTRANDEDNESS:SORTMERNA' {
      cpus = { 6 * task.attempt }
      memory = { 12.GB * task.attempt }
    }

  withName: 'NFCORE_RNASEQ:RNASEQ:FASTQ_QC_TRIM_FILTER_SETSTRANDEDNESS:SORTMERNA_INDEX' {
      cpus = { 2 * task.attempt }
      memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:MULTIQC' {
    cpus = { 4 * task.attempt }
    memory = { 8.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT' {
    cpus = { 4 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_IDXSTATS' {
    cpus = { 2 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS' {
    cpus = { 2 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
    cpus = { 2 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
    cpus = { 8 * task.attempt }
    memory = { 16.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:_IGENOMES' {
    //cpus = { 8 * task.attempt }
    //memory = { 34.GB * task.attempt }
    cpus = { task.attempt > 2 ? check_max(12, 'cpus') : check_max(8, 'cpus') }
    memory =  { check_max( 45.GB * task.attempt, 'memory')}
    ext {
         args = { [
                '--quantMode TranscriptomeSAM',
                '--twopassMode Basic',
                '--outSAMtype BAM Unsorted',
                '--readFilesCommand zcat',
                '--runRNGseed 0',
                '--outFilterMultimapNmax 20',
                '--alignSJDBoverhangMin 1',
                '--outSAMattributes NH HI AS NM MD',
                '--quantTranscriptomeBan Singleend',
                '--outSAMstrandField intronMotif',
                params.save_unaligned ? '--outReadsUnmapped Fastx' : '',
                params.extra_star_align_args ? params.extra_star_align_args.split("\\s(?=--)") : ''
            ].flatten().unique(false).join(' ').trim() }
      }
    publishDir = [[path:{ "${params.outdir}/${params.aligner}/log" }, mode:'copy', pattern:'*.{out,tab}'], [path:{ params.save_align_intermeds ? "${params.outdir}/${params.aligner}" : params.outdir }, mode:'copy', pattern:'*.bam', saveAs:{ params.save_align_intermeds ? it : null }], [path:{ params.save_unaligned ? "${params.outdir}/${params.aligner}/unmapped" : params.outdir }, mode:'copy', pattern:'*.fastq.gz', saveAs:{ params.save_unaligned ? it : null }]]
 
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_GENOME:BAM_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT' {
    cpus = { 4 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_GENOME:BAM_STATS_SAMTOOLS:SAMTOOLS_IDXSTATS' {
    cpus = { 2 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_GENOME:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS' {
    cpus = { 2 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_GENOME:SAMTOOLS_INDEX' {
    cpus = { 2 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_GENOME:UMITOOLS_DEDUP' {
    cpus = { 8 * task.attempt }
    memory = { 16.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_TRANSCRIPTOME:BAM_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT' {
    cpus = { 4 * task.attempt }
    memory = { 8.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_TRANSCRIPTOME:BAM_STATS_SAMTOOLS:SAMTOOLS_IDXSTATS' {
    cpus = { 2 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_TRANSCRIPTOME:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS' {
    cpus = { 2 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_TRANSCRIPTOME:SAMTOOLS_INDEX' {
    cpus = { 2 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_TRANSCRIPTOME:UMITOOLS_DEDUP' {
    cpus = { 2 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_RSEQC:RSEQC_BAMSTAT' {
    cpus = { 2 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_RSEQC:RSEQC_INFEREXPERIMENT' {
    cpus = { 6 * task.attempt }
    memory = { 8.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_RSEQC:RSEQC_INNERDISTANCE' {
    cpus = { 2 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_RSEQC:RSEQC_JUNCTIONANNOTATION' {
    cpus = { 2 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_RSEQC:RSEQC_JUNCTIONSATURATION' {
    cpus = { 2 * task.attempt }
    memory = { 8.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_RSEQC:RSEQC_READDISTRIBUTION' {
    cpus = { 4 * task.attempt }
    memory = { 16.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_RSEQC:RSEQC_READDUPLICATION' {
    cpus = { 4 * task.attempt }
    memory = { 30.GB * task.attempt }
    publishDir = [[path:{ "${params.outdir}/${params.aligner}/rseqc/read_duplication/pdf" }, mode:'copy', pattern:'*.pdf'], [path:{ "${params.outdir}/${params.aligner}/rseqc/read_duplication/xls" }, mode:'copy', pattern:'*.xls'], [path:{ "${params.outdir}/${params.aligner}/rseqc/read_duplication/rscript" }, mode:'copy', pattern:'*.r']]
  }
  
  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT' {
    cpus = { 4 * task.attempt }
    memory = { 8.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_IDXSTATS' {
    cpus = { 2 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS' {
    cpus = { 2 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
    cpus = { 2 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
    cpus = { 8 * task.attempt }
    memory = { 16.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:CUSTOM_DUMPSOFTWAREVERSIONS' {
    cpus = { 2 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:DUPRADAR' {
    cpus = { 4 * task.attempt }
    memory = { 12.GB * task.attempt }
  }
  
  withName: 'NFCORE_RNASEQ:RNASEQ:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {
    cpus = { 12 * task.attempt }
    memory = { 30.GB * task.attempt }
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:UMITOOLS_EXTRACT' {
    cpus = { 2 * task.attempt }
    memory = { 3.5.GB * task.attempt }
  }
  
  withName: 'NFCORE_RNASEQ:RNASEQ:MULTIQC_CUSTOM_BIOTYPE' {
      cpus = { 2 * task.attempt }
      memory = { 3.5.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_PSEUDO_ALIGNMENT:SALMON_QUANT' {
      cpus = { 6 * task.attempt }
      memory = { 18.GB * task.attempt }
  }
  
  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_PSEUDO_ALIGNMENT:SE_GENE' {
      cpus = { 4 * task.attempt }
      memory = { 8.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_PSEUDO_ALIGNMENT:SE_GENE_LENGTH_SCALED' {
      cpus = { 3 * task.attempt }
      memory = { 4.GB * task.attempt }
  }
  
  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_PSEUDO_ALIGNMENT:SE_GENE_SCALED' {
      cpus = { 3 * task.attempt }
      memory = { 4.GB * task.attempt }
  }
  
  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_PSEUDO_ALIGNMENT:SE_TRANSCRIPT' {
      cpus = { 2 * task.attempt }
      memory = { 4.GB * task.attempt }
  }
  
  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_PSEUDO_ALIGNMENT:TX2GENE' {
      cpus = { 2 * task.attempt }
      memory = { 4.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_PSEUDO_ALIGNMENT:TXIMPORT' {
      cpus = { 2 * task.attempt }
      memory = { 4.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:SALMON_QUANT' {
    cpus = { 8 * task.attempt }
    memory = { 30.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:SE_GENE' {
    cpus = { 2 * task.attempt }
    memory = { 2.GB * task.attempt }
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:SE_GENE_LENGTH_SCALED' {
    cpus = { 2 * task.attempt }
    memory = { 2.GB * task.attempt }
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:SE_GENE_SCALED' {
    cpus = { 2 * task.attempt }
    memory = { 2.GB * task.attempt }
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:SE_TRANSCRIPT' {
    cpus = { 2 * task.attempt }
    memory = { 2.GB * task.attempt }
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:TX2GENE' {
    cpus = { 2 * task.attempt }
    memory = { 2.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:TXIMPORT' {
    cpus = { 2 * task.attempt }
    memory = { 4.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:SAMTOOLS_SORT' {
    cpus = { 8 * task.attempt }
    memory = { 16.GB * task.attempt }
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:SORTMERNA' {
      //cpus = { 16 * task.attempt }
      //memory = { 34.GB * task.attempt }
      cpus = { task.attempt > 2 ? check_max(30, 'cpus') : check_max(16, 'cpus' ) }
      memory = { check_max( 34.GB * task.attempt, 'memory'  ) }
      ext {
         args = '--num_alignments 1 -v'
      }
      publishDir = [[path:{ "${params.outdir}/sortmerna" }, mode:'copy', pattern:'*.log'], [path:{ params.save_non_ribo_reads ? "${params.outdir}/sortmerna" : params.outdir }, mode:'copy', pattern:'*.fastq.gz', saveAs:{ params.save_non_ribo_reads ? it : null }]]
  }

  withName: 'NFCORE_RNASEQ:RNASEQ:SUBREAD_FEATURECOUNTS' {
      cpus = { 4 * task.attempt }
      memory = { 4.GB * task.attempt }
  }
  
  withName: 'NFCORE_RNASEQ:RNASEQ:UMITOOLS_PREPAREFORSALMON' {
    cpus = { 2 * task.attempt }
    memory = { 4.GB * task.attempt }
  }

  withName:BEDTOOLS_GENOMECOV {
    memory = { check_max(34.GB * task.attempt, 'memory' )}
    ext {
         args = '-split -du'
    }
    publishDir = [enabled:false]
  }

  withName:'.*:FASTQ_SUBSAMPLE_FQ_SALMON:SALMON_QUANT' {
    memory = { check_max( 45.GB * task.attempt, 'memory')}
    ext {
         args = '--skipQuant'
    }
    publishDir = [enabled:false]
  }

}
